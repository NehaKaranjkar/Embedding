//Server_Geom.sitar
//Models a server with buffering
//and geometrically distributed service time
//
//
//Parameters :
//	q (double, 0<q<=1) : probability of finishing an ongoing job in the current cycle
//	K (double) : number of servers 
//	C (double) : size of the buffer in front of the server.
//		if C==0, infinite buffering is modeled.
//		if C>0, finite buffering, of size C is modeled.
//	N (long unsigned int) : total number of jobs to be serviced.
//		if N>0, simulation stops after servicing N jobs.
//		if N==0, which is default, the server keeps servicing jobs indefinitely.
//
//State variables :
//	jobs_served : total number of jobs serviced so far



module Server_Geom
	include
	$
	#include<cassert>
	#include"RandomGenerator.h"
	#include"Queue.h"
	#include"PerturbedParameter.h"
	#include"Occupancy.h"
	$

	//simulation parameters
	decl
	$
	double q;
	double K;
	double C;
	long unsigned int N;
	$

	//internal variables
	decl
	$
	PerturbedParameter K_value;
	PerturbedParameter C_value;

	Queue Q;
	long unsigned int jobs_served;  //number of jobs served so far.
	int ongoing_jobs;  		//number of ongoing jobs in the server
	$


	init
	$
	C=0;
	q=0;
	K=1;
	N=0;
	jobs_served=0;
	ongoing_jobs=0;
	$

	behavior
		//checks on parameters
		$
		assert(randomGenerator);
		assert(q>0 and q<=1);

		assert(C>=0); assert(C_value.y==C);
		assert(K>0);  assert(K_value.y==K);

		K_value.setInstantaneousValue();
		if(C>0) Q.setCapacity(C_value.setInstantaneousValue());
		$;

		do
			
			wait until (this_phase==0);
			$
			//perturb C and K parameters at the start of each cycle
			if(K!=1)K_value.setInstantaneousValue();
			if(C>0) 
			{
				if(int(Q.size)>=int(C-2)) 
				Q.setCapacity(C_value.setInstantaneousValue());
			}

			//pull as many jobs from the queue
			//as there are free servers.
			while( (!(Q.empty())) and (ongoing_jobs < K_value.getInstantaneousValue()))
			{
				Q.pull();
				ongoing_jobs ++;
			}
			$;
			
			wait until (this_phase==1);
			//iterate through each ongoing job,
			//and toss a coin to determine if the
			//job should finish in the current cycle.
			$
			int i_max = ongoing_jobs; 
			int i;
			for(i=1;i<=i_max;i++)
			{
				//see if job i finishes in this cycle
				if(randomGenerator->get() < q)
				{
					jobs_served++;
					ongoing_jobs--;
				}
			}
			$;

		while((N==0) or (jobs_served<N )) end do;
		stop simulation;
	end behavior
end module

